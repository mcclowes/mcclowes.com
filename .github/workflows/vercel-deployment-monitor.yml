---
name: Vercel Deployment Monitor

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  check-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Monitor Vercel Deployments
        uses: actions/github-script@v7
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const VERCEL_TOKEN = process.env.VERCEL_TOKEN;
            const VERCEL_PROJECT_ID = 'mcclowes.com';

            if (!VERCEL_TOKEN) {
              console.log('VERCEL_TOKEN not found. Please add it as a repository secret.');
              return;
            }

            // Function to make Vercel API requests
            async function vercelApiRequest(endpoint) {
              const response = await fetch(`https://api.vercel.com${endpoint}`, {
                headers: {
                  'Authorization': `Bearer ${VERCEL_TOKEN}`,
                  'Content-Type': 'application/json'
                }
              });

              if (!response.ok) {
                const msg = `Vercel API request failed: ${response.status} ${response.statusText}`;
                throw new Error(msg);
              }

              return await response.json();
            }

            // Function to check if an issue already exists for this deployment
            async function checkExistingIssue(deploymentId) {
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                labels: 'deployment-failure'
              });

              return issues.find(issue =>
                issue.body && issue.body.includes(`Deployment ID: ${deploymentId}`)
              );
            }

            // Function to create a GitHub issue for failed deployment
            async function createDeploymentIssue(deployment) {
              const existingIssue = await checkExistingIssue(deployment.uid);

              if (existingIssue) {
                console.log(`Issue already exists for deployment ${deployment.uid}: ${existingIssue.html_url}`);
                return;
              }

              const title = `ðŸš¨ Vercel Production Deployment Failed - ${new Date(deployment.createdAt).toLocaleString()}`;

              const commitLink = deployment.source?.sha
                ? `**Commit Link:** https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${deployment.source.sha}`
                : '';

              const body = `
            ## Deployment Failure Details

            **Deployment ID:** ${deployment.uid}
            **URL:** ${deployment.url}
            **Branch:** ${deployment.source?.ref || 'main'}
            **Commit:** ${deployment.source?.sha || 'N/A'}
            **Created:** ${new Date(deployment.createdAt).toLocaleString()}
            **State:** ${deployment.state}
            **Ready State:** ${deployment.readyState}

            **Vercel Dashboard:** https://vercel.com/mcclowes/mcclowes.com/deployments/${deployment.uid}

            ${commitLink}

            ## Error Information
            ${deployment.buildingAt ? `**Build Started:** ${new Date(deployment.buildingAt).toLocaleString()}` : ''}
            ${deployment.errorMessage ? `**Error:** ${deployment.errorMessage}` : '**Error:** Deployment failed during build or runtime'}

            ## Next Steps
            - [ ] Check the Vercel dashboard for detailed build logs
            - [ ] Review the failed commit for potential issues
            - [ ] Fix the underlying issue
            - [ ] Trigger a new deployment

            ---
            *This issue was automatically created by the Vercel Deployment Monitor workflow.*
            `;

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['deployment-failure', 'bug', 'vercel']
              });

              console.log(`Created issue for failed deployment: ${deployment.uid}`);
            }

            try {
              // Get project details first
              const projectResponse = await vercelApiRequest(`/v9/projects/${VERCEL_PROJECT_ID}`);
              const project = projectResponse;

              console.log(`Monitoring project: ${project.name}`);

              // Get recent deployments (last 10)
              const deploymentsResponse = await vercelApiRequest(`/v6/deployments?projectId=${project.id}&limit=10`);
              const deployments = deploymentsResponse.deployments;

              console.log(`Found ${deployments.length} recent deployments`);

              // Check for failed deployments in the last 24 hours
              const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);

              for (const deployment of deployments) {
                const deploymentDate = new Date(deployment.createdAt);

                // Only check recent deployments
                if (deploymentDate < oneDayAgo) {
                  continue;
                }

                console.log(`Checking deployment ${deployment.uid}: ${deployment.state} (${deployment.readyState})`);

                // Check if deployment failed
                if (deployment.state === 'ERROR' || deployment.readyState === 'ERROR') {
                  console.log(`Found failed deployment: ${deployment.uid}`);
                  await createDeploymentIssue(deployment);
                }
              }

              console.log('Deployment monitoring completed successfully');

            } catch (error) {
              console.error('Error monitoring deployments:', error);

              // Create an issue for the monitoring error itself
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸ”§ Vercel Deployment Monitor Error',
                body: `
            ## Monitor Error

            The Vercel deployment monitoring workflow encountered an error:

            **Error:** ${error.message}
            **Time:** ${new Date().toLocaleString()}

            ## Next Steps
            - [ ] Check the workflow logs for more details
            - [ ] Verify VERCEL_TOKEN is set correctly
            - [ ] Ensure Vercel API permissions are correct

            ---
            *This issue was automatically created by the Vercel Deployment Monitor workflow.*
            `,
                labels: ['deployment-monitor', 'bug']
              });

              throw error;
            }